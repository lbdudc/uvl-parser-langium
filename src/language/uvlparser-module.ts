import { type Module, inject, IndentationAwareLexer, IndentationAwareTokenBuilder } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { UvlparserGeneratedModule, UvlparserGeneratedSharedModule } from './generated/module.js';
import { UvlparserValidator, registerValidationChecks } from './uvlparser-validator.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type UvlparserAddedServices = {
    validation: {
        UvlparserValidator: UvlparserValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type UvlparserServices = LangiumServices & UvlparserAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const UvlparserModule: Module<UvlparserServices, PartialLangiumServices & UvlparserAddedServices> = {
    validation: {
        UvlparserValidator: () => new UvlparserValidator()
    },
    parser:{
        TokenBuilder: () => new IndentationAwareTokenBuilder(),
        Lexer: (services) => new IndentationAwareLexer(services),
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createUvlparserServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Uvlparser: UvlparserServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        UvlparserGeneratedSharedModule
    );
    const Uvlparser = inject(
        createDefaultModule({ shared }),
        UvlparserGeneratedModule,
        UvlparserModule
    );
    shared.ServiceRegistry.register(Uvlparser);
    registerValidationChecks(Uvlparser);
    if (!context.connection) {
        // We don't run inside a language server
        // Therefore, initialize the configuration provider instantly
        shared.workspace.ConfigurationProvider.initialized({});
    }
    return { shared, Uvlparser };
}
